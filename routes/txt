route.post('/capture_intent/:id', async (req, res) => {
    try {
        const intentId = req.params.id;

        // Retrieve the PaymentIntent to check its status
        const intent = await stripe.paymentIntents.retrieve(intentId);

        // Check if the PaymentIntent is in a state that allows capturing
        if (intent.status === 'requires_capture') {
            // Capture the PaymentIntent
            const capturedIntent = await stripe.paymentIntents.capture(intentId);
            res.json({ intent: capturedIntent });
        } else {
            // Return an error if the PaymentIntent is not in the correct state
            res.status(400).json({ error: 'Cannot capture PaymentIntent. It must be in "requires_capture" state.' });
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});


// Create a refund for the created intent
// route.post('/create_refund/:id', async (req, res) => {
//     try {
//         const intentId = req.params.id;
//         const refund = await stripe.refunds.create({ payment_intent: intentId });

//         res.json({ refund });
//     } catch (error) {
//         res.status(500).json({ error: error.message });
//     }
// });
route.post('/create_refund/:id', async (req, res) => {
    try {
        const intentId = req.params.id;

        // Retrieve the PaymentIntent to check its status
        const paymentIntent = await stripe.paymentIntents.retrieve(intentId);

        // Check if the PaymentIntent has a successful charge
        if (paymentIntent.status !== 'succeeded' || !paymentIntent.charges.data.length) {
            return res.status(400).json({
                error: {
                    message: 'This PaymentIntent does not have a successful charge to refund.',
                    type: 'invalid_request_error'
                }
            });
        }

        // Create a refund for the PaymentIntent
        const refund = await stripe.refunds.create({ payment_intent: intentId });

        res.json({ refund });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});
